<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LabSystem Store - CMS & Totem Serverless</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            box-sizing: border-box;
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .card-hover {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card-hover:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        .fade-in {
            opacity: 0;
            animation: fadeIn 0.5s ease forwards;
        }
        
        @keyframes fadeIn {
            to { opacity: 1; }
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }
        
        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .totem-bg {
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }
        
        .cart-item {
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Header -->
    <header class="gradient-bg text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 py-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="text-3xl">üè™</div>
                    <div>
                        <h1 class="text-2xl font-bold">LabSystem Store</h1>
                        <p class="text-sm opacity-90">CMS & Totem Serverless</p>
                    </div>
                </div>
                <div class="flex space-x-4">
                    <button id="cmsBtn" class="bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition duration-300">
                        üìä CMS Admin
                    </button>
                    <button id="totemBtn" class="bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition duration-300">
                        üñ•Ô∏è Totem
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main id="mainContent" class="max-w-7xl mx-auto px-4 py-8">
        <!-- Dashboard Overview -->
        <div class="grid md:grid-cols-3 gap-6 mb-8">
            <div class="bg-white p-6 rounded-xl shadow-lg card-hover">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Status do Sistema</h3>
                    <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                </div>
                <p class="text-gray-600">Sistema Online</p>
                <p class="text-sm text-gray-500 mt-2">√öltima sincroniza√ß√£o: <span id="lastSync">Nunca</span></p>
            </div>
            
            <div class="bg-white p-6 rounded-xl shadow-lg card-hover">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Produtos</h3>
                    <div class="text-2xl">üì¶</div>
                </div>
                <p class="text-2xl font-bold text-blue-600" id="productCount">0</p>
                <p class="text-sm text-gray-500">Itens no card√°pio</p>
            </div>
            
            <div class="bg-white p-6 rounded-xl shadow-lg card-hover">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Categorias</h3>
                    <div class="text-2xl">üìã</div>
                </div>
                <p class="text-2xl font-bold text-purple-600" id="categoryCount">0</p>
                <p class="text-sm text-gray-500">Categorias ativas</p>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white p-6 rounded-xl shadow-lg mb-8">
            <h2 class="text-xl font-semibold text-gray-800 mb-6">A√ß√µes R√°pidas</h2>
            <div class="grid md:grid-cols-4 gap-4">
                <button onclick="openCMS()" class="bg-blue-500 text-white p-4 rounded-lg hover:bg-blue-600 transition duration-300">
                    <div class="text-2xl mb-2">‚öôÔ∏è</div>
                    <div class="font-semibold">Gerenciar CMS</div>
                </button>
                <button onclick="openTotem()" class="bg-green-500 text-white p-4 rounded-lg hover:bg-green-600 transition duration-300">
                    <div class="text-2xl mb-2">üñ•Ô∏è</div>
                    <div class="font-semibold">Abrir Totem</div>
                </button>
                <button onclick="syncData()" class="bg-purple-500 text-white p-4 rounded-lg hover:bg-purple-600 transition duration-300">
                    <div class="text-2xl mb-2">üîÑ</div>
                    <div class="font-semibold">Sincronizar</div>
                </button>
                <button onclick="exportData()" class="bg-orange-500 text-white p-4 rounded-lg hover:bg-orange-600 transition duration-300">
                    <div class="text-2xl mb-2">üíæ</div>
                    <div class="font-semibold">Backup</div>
                </button>
            </div>
        </div>

        <!-- Features Overview -->
        <div class="grid md:grid-cols-2 gap-8">
            <div class="bg-white p-6 rounded-xl shadow-lg">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">üéõÔ∏è M√≥dulo CMS</h3>
                <ul class="space-y-3 text-gray-600">
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Backend Serverless (JSONBin)</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Persist√™ncia Local</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Backup e Restore</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Customiza√ß√£o Visual</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Gerenciamento de Produtos</li>
                </ul>
            </div>
            
            <div class="bg-white p-6 rounded-xl shadow-lg">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">üñ•Ô∏è M√≥dulo Totem</h3>
                <ul class="space-y-3 text-gray-600">
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Card√°pio Din√¢mico</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Entrega Inteligente</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Checkout via WhatsApp</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Interface Responsiva</li>
                    <li class="flex items-center"><span class="text-green-500 mr-2">‚úì</span> Carrinho de Compras</li>
                </ul>
            </div>
        </div>
    </main>

    <!-- CMS Modal -->
    <div id="cmsModal" class="modal">
        <div class="bg-white rounded-xl shadow-2xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h2 class="text-2xl font-bold text-gray-800">üéõÔ∏è CMS Admin</h2>
                    <button onclick="closeCMS()" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
                </div>
            </div>
            
            <div class="p-6">
                <!-- CMS Tabs -->
                <div class="flex space-x-4 mb-6 border-b">
                    <button onclick="showCMSTab('products')" class="cms-tab px-4 py-2 border-b-2 border-blue-500 text-blue-600 font-semibold">Produtos</button>
                    <button onclick="showCMSTab('categories')" class="cms-tab px-4 py-2 text-gray-600 hover:text-blue-600">Categorias</button>
                    <button onclick="showCMSTab('settings')" class="cms-tab px-4 py-2 text-gray-600 hover:text-blue-600">Configura√ß√µes</button>
                    <button onclick="showCMSTab('delivery')" class="cms-tab px-4 py-2 text-gray-600 hover:text-blue-600">Entrega</button>
                </div>

                <!-- Products Tab -->
                <div id="productsTab" class="cms-tab-content">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold">Gerenciar Produtos</h3>
                        <button onclick="addProduct()" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">+ Adicionar Produto</button>
                    </div>
                    <div id="productsList" class="space-y-4">
                        <!-- Products will be loaded here -->
                    </div>
                </div>

                <!-- Categories Tab -->
                <div id="categoriesTab" class="cms-tab-content hidden">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold">Gerenciar Categorias</h3>
                        <button onclick="addCategory()" class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600">+ Adicionar Categoria</button>
                    </div>
                    <div id="categoriesList" class="space-y-4">
                        <!-- Categories will be loaded here -->
                    </div>
                </div>

                <!-- Settings Tab -->
                <div id="settingsTab" class="cms-tab-content hidden">
                    <h3 class="text-xl font-semibold mb-6">Configura√ß√µes do Totem</h3>
                    <div class="grid md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nome da Loja</label>
                            <input type="text" id="storeName" class="w-full p-3 border border-gray-300 rounded-lg" placeholder="Minha Loja">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">WhatsApp (com c√≥digo do pa√≠s)</label>
                            <input type="text" id="whatsappNumber" class="w-full p-3 border border-gray-300 rounded-lg" placeholder="5511999999999">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Cor Principal</label>
                            <input type="color" id="primaryColor" class="w-full h-12 border border-gray-300 rounded-lg">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">URL da Logo</label>
                            <input type="url" id="logoUrl" class="w-full p-3 border border-gray-300 rounded-lg" placeholder="https://...">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">URL da Imagem de Fundo</label>
                            <input type="url" id="backgroundUrl" class="w-full p-3 border border-gray-300 rounded-lg" placeholder="https://...">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">URL da M√∫sica de Fundo</label>
                            <input type="url" id="musicUrl" class="w-full p-3 border border-gray-300 rounded-lg" placeholder="https://...">
                        </div>
                    </div>
                </div>

                <!-- Delivery Tab -->
                <div id="deliveryTab" class="cms-tab-content hidden">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold">√Åreas de Entrega</h3>
                        <button onclick="addDeliveryArea()" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600">+ Adicionar √Årea</button>
                    </div>
                    <div id="deliveryAreasList" class="space-y-4">
                        <!-- Delivery areas will be loaded here -->
                    </div>
                </div>

                <!-- CMS Actions -->
                <div class="flex justify-between items-center mt-8 pt-6 border-t">
                    <div class="flex space-x-4">
                        <button onclick="saveDraft()" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">üíæ Salvar Rascunho</button>
                        <button onclick="loadDraft()" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">üìÇ Carregar Rascunho</button>
                    </div>
                    <div class="flex space-x-4">
                        <button onclick="importData()" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600">üì• Importar</button>
                        <button onclick="exportData()" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600">üì§ Exportar</button>
                        <button onclick="publishToTotem()" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600">üöÄ Publicar no Totem</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Totem Modal -->
    <div id="totemModal" class="modal">
        <div class="w-full h-full bg-white relative">
            <!-- Totem Header -->
            <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 relative">
                <button onclick="closeTotem()" class="absolute top-4 right-4 text-white hover:text-gray-200 text-2xl z-10">&times;</button>
                <div class="text-center">
                    <div class="text-4xl mb-2" id="totemLogo">üè™</div>
                    <h1 class="text-3xl font-bold" id="totemStoreName">Minha Loja</h1>
                    <p class="text-lg opacity-90">Fa√ßa seu pedido</p>
                </div>
            </div>

            <div class="flex h-[calc(100vh-140px)]">
                <!-- Menu Section -->
                <div class="flex-1 p-6 overflow-y-auto">
                    <!-- Categories -->
                    <div class="mb-6">
                        <h2 class="text-2xl font-bold text-gray-800 mb-4">Categorias</h2>
                        <div id="totemCategories" class="flex flex-wrap gap-3 mb-6">
                            <!-- Categories will be loaded here -->
                        </div>
                    </div>

                    <!-- Products -->
                    <div id="totemProducts" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <!-- Products will be loaded here -->
                    </div>
                </div>

                <!-- Cart Section -->
                <div class="w-80 bg-gray-50 p-6 border-l border-gray-200">
                    <h3 class="text-xl font-bold text-gray-800 mb-4">üõí Seu Pedido</h3>
                    
                    <div id="cartItems" class="space-y-3 mb-6 max-h-60 overflow-y-auto">
                        <p class="text-gray-500 text-center py-8">Carrinho vazio</p>
                    </div>

                    <div class="border-t pt-4">
                        <div class="flex justify-between items-center mb-2">
                            <span class="font-semibold">Subtotal:</span>
                            <span id="subtotal" class="font-bold">R$ 0,00</span>
                        </div>
                        
                        <!-- Delivery Area Selection -->
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">√Årea de Entrega:</label>
                            <select id="deliveryAreaSelect" class="w-full p-2 border border-gray-300 rounded-lg" onchange="updateDeliveryFee()">
                                <option value="">Selecione a √°rea</option>
                            </select>
                        </div>
                        
                        <div class="flex justify-between items-center mb-2">
                            <span class="font-semibold">Taxa de Entrega:</span>
                            <span id="deliveryFee" class="font-bold">R$ 0,00</span>
                        </div>
                        
                        <div class="flex justify-between items-center mb-4 text-lg">
                            <span class="font-bold">Total:</span>
                            <span id="total" class="font-bold text-green-600">R$ 0,00</span>
                        </div>

                        <button onclick="checkout()" class="w-full bg-green-500 text-white py-3 rounded-lg font-semibold hover:bg-green-600 transition duration-300 disabled:bg-gray-400" id="checkoutBtn" disabled>
                            üí¨ Finalizar no WhatsApp
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden file input for import -->
    <input type="file" id="importFile" accept=".json" style="display: none;" onchange="handleImport(event)">

    <script>
        // Global state
        let storeData = {
            settings: {
                storeName: 'Minha Loja',
                whatsappNumber: '5511999999999',
                primaryColor: '#3B82F6',
                logoUrl: '',
                backgroundUrl: '',
                musicUrl: ''
            },
            categories: [],
            products: [],
            deliveryAreas: []
        };

        let cart = [];
        let selectedCategory = 'all';

        // Initialize the application
        function init() {
            loadFromLocalStorage();
            updateDashboard();
            loadSampleData();
        }

        // Load sample data
        function loadSampleData() {
            if (storeData.categories.length === 0) {
                storeData.categories = [
                    { id: 1, name: 'Lanches', icon: 'üçî', active: true },
                    { id: 2, name: 'Bebidas', icon: 'ü•§', active: true },
                    { id: 3, name: 'Sobremesas', icon: 'üç∞', active: true }
                ];
            }

            if (storeData.products.length === 0) {
                storeData.products = [
                    { id: 1, name: 'X-Burger', description: 'Hamb√∫rguer artesanal com queijo', price: 25.90, category: 1, image: 'üçî', active: true },
                    { id: 2, name: 'X-Bacon', description: 'Hamb√∫rguer com bacon crocante', price: 28.90, category: 1, image: 'ü•ì', active: true },
                    { id: 3, name: 'Coca-Cola', description: 'Refrigerante 350ml', price: 5.50, category: 2, image: 'ü•§', active: true },
                    { id: 4, name: 'Suco Natural', description: 'Suco de laranja 300ml', price: 8.90, category: 2, image: 'üçä', active: true },
                    { id: 5, name: 'Brownie', description: 'Brownie de chocolate', price: 12.90, category: 3, image: 'üç∞', active: true }
                ];
            }

            if (storeData.deliveryAreas.length === 0) {
                storeData.deliveryAreas = [
                    { id: 1, name: 'Centro', fee: 5.00, active: true },
                    { id: 2, name: 'Zona Norte', fee: 8.00, active: true },
                    { id: 3, name: 'Zona Sul', fee: 10.00, active: true }
                ];
            }

            updateDashboard();
        }

        // Dashboard functions
        function updateDashboard() {
            document.getElementById('productCount').textContent = storeData.products.filter(p => p.active).length;
            document.getElementById('categoryCount').textContent = storeData.categories.filter(c => c.active).length;
        }

        // CMS Functions
        function openCMS() {
            document.getElementById('cmsModal').classList.add('active');
            loadCMSData();
        }

        function closeCMS() {
            document.getElementById('cmsModal').classList.remove('active');
        }

        function showCMSTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.cms-tab-content').forEach(tab => tab.classList.add('hidden'));
            document.querySelectorAll('.cms-tab').forEach(tab => {
                tab.classList.remove('border-blue-500', 'text-blue-600', 'font-semibold');
                tab.classList.add('text-gray-600');
            });

            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.remove('hidden');
            event.target.classList.add('border-blue-500', 'text-blue-600', 'font-semibold');
            event.target.classList.remove('text-gray-600');

            // Load tab-specific data
            if (tabName === 'products') loadProductsList();
            if (tabName === 'categories') loadCategoriesList();
            if (tabName === 'settings') loadSettings();
            if (tabName === 'delivery') loadDeliveryAreasList();
        }

        function loadCMSData() {
            loadProductsList();
            loadSettings();
        }

        function loadProductsList() {
            const container = document.getElementById('productsList');
            container.innerHTML = '';

            storeData.products.forEach(product => {
                const categoryName = storeData.categories.find(c => c.id === product.category)?.name || 'Sem categoria';
                container.innerHTML += `
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-4">
                                <div class="text-3xl">${product.image}</div>
                                <div>
                                    <h4 class="font-semibold">${product.name}</h4>
                                    <p class="text-sm text-gray-600">${product.description}</p>
                                    <p class="text-sm text-gray-500">Categoria: ${categoryName}</p>
                                    <p class="font-bold text-green-600">R$ ${product.price.toFixed(2)}</p>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="editProduct(${product.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">Editar</button>
                                <button onclick="deleteProduct(${product.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600">Excluir</button>
                            </div>
                        </div>
                    </div>
                `;
            });
        }

        function loadCategoriesList() {
            const container = document.getElementById('categoriesList');
            container.innerHTML = '';

            storeData.categories.forEach(category => {
                container.innerHTML += `
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-4">
                                <div class="text-3xl">${category.icon}</div>
                                <div>
                                    <h4 class="font-semibold">${category.name}</h4>
                                    <p class="text-sm text-gray-500">Status: ${category.active ? 'Ativa' : 'Inativa'}</p>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="editCategory(${category.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">Editar</button>
                                <button onclick="deleteCategory(${category.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600">Excluir</button>
                            </div>
                        </div>
                    </div>
                `;
            });
        }

        function loadDeliveryAreasList() {
            const container = document.getElementById('deliveryAreasList');
            container.innerHTML = '';

            storeData.deliveryAreas.forEach(area => {
                container.innerHTML += `
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div class="flex items-center justify-between">
                            <div>
                                <h4 class="font-semibold">${area.name}</h4>
                                <p class="text-sm text-gray-600">Taxa: R$ ${area.fee.toFixed(2)}</p>
                                <p class="text-sm text-gray-500">Status: ${area.active ? 'Ativa' : 'Inativa'}</p>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="editDeliveryArea(${area.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">Editar</button>
                                <button onclick="deleteDeliveryArea(${area.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600">Excluir</button>
                            </div>
                        </div>
                    </div>
                `;
            });
        }

        function loadSettings() {
            document.getElementById('storeName').value = storeData.settings.storeName;
            document.getElementById('whatsappNumber').value = storeData.settings.whatsappNumber;
            document.getElementById('primaryColor').value = storeData.settings.primaryColor;
            document.getElementById('logoUrl').value = storeData.settings.logoUrl;
            document.getElementById('backgroundUrl').value = storeData.settings.backgroundUrl;
            document.getElementById('musicUrl').value = storeData.settings.musicUrl;
        }

        function saveSettings() {
            storeData.settings = {
                storeName: document.getElementById('storeName').value,
                whatsappNumber: document.getElementById('whatsappNumber').value,
                primaryColor: document.getElementById('primaryColor').value,
                logoUrl: document.getElementById('logoUrl').value,
                backgroundUrl: document.getElementById('backgroundUrl').value,
                musicUrl: document.getElementById('musicUrl').value
            };
            saveToLocalStorage();
        }

        // Add/Edit functions (simplified for demo)
        function addProduct() {
            const name = prompt('Nome do produto:');
            if (!name) return;
            
            const description = prompt('Descri√ß√£o:');
            const price = parseFloat(prompt('Pre√ßo:'));
            const image = prompt('Emoji do produto:') || 'üçΩÔ∏è';
            
            if (isNaN(price)) {
                alert('Pre√ßo inv√°lido!');
                return;
            }

            const newProduct = {
                id: Date.now(),
                name,
                description: description || '',
                price,
                category: storeData.categories[0]?.id || 1,
                image,
                active: true
            };

            storeData.products.push(newProduct);
            saveToLocalStorage();
            loadProductsList();
            updateDashboard();
        }

        function addCategory() {
            const name = prompt('Nome da categoria:');
            if (!name) return;
            
            const icon = prompt('Emoji da categoria:') || 'üìÇ';

            const newCategory = {
                id: Date.now(),
                name,
                icon,
                active: true
            };

            storeData.categories.push(newCategory);
            saveToLocalStorage();
            loadCategoriesList();
            updateDashboard();
        }

        function addDeliveryArea() {
            const name = prompt('Nome da √°rea:');
            if (!name) return;
            
            const fee = parseFloat(prompt('Taxa de entrega:'));
            
            if (isNaN(fee)) {
                alert('Taxa inv√°lida!');
                return;
            }

            const newArea = {
                id: Date.now(),
                name,
                fee,
                active: true
            };

            storeData.deliveryAreas.push(newArea);
            saveToLocalStorage();
            loadDeliveryAreasList();
        }

        function deleteProduct(id) {
            if (confirm('Deseja excluir este produto?')) {
                storeData.products = storeData.products.filter(p => p.id !== id);
                saveToLocalStorage();
                loadProductsList();
                updateDashboard();
            }
        }

        function deleteCategory(id) {
            if (confirm('Deseja excluir esta categoria?')) {
                storeData.categories = storeData.categories.filter(c => c.id !== id);
                saveToLocalStorage();
                loadCategoriesList();
                updateDashboard();
            }
        }

        function deleteDeliveryArea(id) {
            if (confirm('Deseja excluir esta √°rea?')) {
                storeData.deliveryAreas = storeData.deliveryAreas.filter(a => a.id !== id);
                saveToLocalStorage();
                loadDeliveryAreasList();
            }
        }

        // Totem Functions
        function openTotem() {
            document.getElementById('totemModal').classList.add('active');
            loadTotemData();
        }

        function closeTotem() {
            document.getElementById('totemModal').classList.remove('active');
        }

        function loadTotemData() {
            // Update totem header
            document.getElementById('totemStoreName').textContent = storeData.settings.storeName;
            
            // Load categories
            const categoriesContainer = document.getElementById('totemCategories');
            categoriesContainer.innerHTML = `
                <button onclick="filterProducts('all')" class="category-btn bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600 transition duration-300">
                    Todos
                </button>
            `;
            
            storeData.categories.filter(c => c.active).forEach(category => {
                categoriesContainer.innerHTML += `
                    <button onclick="filterProducts(${category.id})" class="category-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-full hover:bg-gray-300 transition duration-300">
                        ${category.icon} ${category.name}
                    </button>
                `;
            });

            // Load delivery areas
            const deliverySelect = document.getElementById('deliveryAreaSelect');
            deliverySelect.innerHTML = '<option value="">Selecione a √°rea</option>';
            storeData.deliveryAreas.filter(a => a.active).forEach(area => {
                deliverySelect.innerHTML += `<option value="${area.id}">${area.name} - R$ ${area.fee.toFixed(2)}</option>`;
            });

            // Load products
            filterProducts('all');
        }

        function filterProducts(categoryId) {
            selectedCategory = categoryId;
            
            // Update category buttons
            document.querySelectorAll('.category-btn').forEach(btn => {
                btn.classList.remove('bg-blue-500', 'text-white');
                btn.classList.add('bg-gray-200', 'text-gray-700');
            });
            event.target.classList.remove('bg-gray-200', 'text-gray-700');
            event.target.classList.add('bg-blue-500', 'text-white');

            // Filter and display products
            const productsContainer = document.getElementById('totemProducts');
            const filteredProducts = categoryId === 'all' 
                ? storeData.products.filter(p => p.active)
                : storeData.products.filter(p => p.active && p.category === categoryId);

            productsContainer.innerHTML = '';
            filteredProducts.forEach(product => {
                productsContainer.innerHTML += `
                    <div class="bg-white p-4 rounded-xl shadow-lg card-hover">
                        <div class="text-center mb-4">
                            <div class="text-6xl mb-2">${product.image}</div>
                            <h3 class="font-bold text-lg">${product.name}</h3>
                            <p class="text-gray-600 text-sm mb-2">${product.description}</p>
                            <p class="text-2xl font-bold text-green-600">R$ ${product.price.toFixed(2)}</p>
                        </div>
                        <button onclick="addToCart(${product.id})" class="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition duration-300">
                            Adicionar ao Carrinho
                        </button>
                    </div>
                `;
            });
        }

        // Cart Functions
        function addToCart(productId) {
            const product = storeData.products.find(p => p.id === productId);
            if (!product) return;

            const existingItem = cart.find(item => item.id === productId);
            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                cart.push({
                    id: productId,
                    name: product.name,
                    price: product.price,
                    quantity: 1
                });
            }

            updateCart();
        }

        function removeFromCart(productId) {
            cart = cart.filter(item => item.id !== productId);
            updateCart();
        }

        function updateQuantity(productId, change) {
            const item = cart.find(item => item.id === productId);
            if (!item) return;

            item.quantity += change;
            if (item.quantity <= 0) {
                removeFromCart(productId);
            } else {
                updateCart();
            }
        }

        function updateCart() {
            const cartContainer = document.getElementById('cartItems');
            
            if (cart.length === 0) {
                cartContainer.innerHTML = '<p class="text-gray-500 text-center py-8">Carrinho vazio</p>';
                document.getElementById('checkoutBtn').disabled = true;
            } else {
                cartContainer.innerHTML = '';
                cart.forEach(item => {
                    cartContainer.innerHTML += `
                        <div class="cart-item bg-white p-3 rounded-lg shadow">
                            <div class="flex justify-between items-center mb-2">
                                <h4 class="font-semibold text-sm">${item.name}</h4>
                                <button onclick="removeFromCart(${item.id})" class="text-red-500 hover:text-red-700 text-sm">‚úï</button>
                            </div>
                            <div class="flex justify-between items-center">
                                <div class="flex items-center space-x-2">
                                    <button onclick="updateQuantity(${item.id}, -1)" class="bg-gray-200 text-gray-700 w-6 h-6 rounded-full text-sm hover:bg-gray-300">-</button>
                                    <span class="font-semibold">${item.quantity}</span>
                                    <button onclick="updateQuantity(${item.id}, 1)" class="bg-gray-200 text-gray-700 w-6 h-6 rounded-full text-sm hover:bg-gray-300">+</button>
                                </div>
                                <span class="font-bold text-green-600">R$ ${(item.price * item.quantity).toFixed(2)}</span>
                            </div>
                        </div>
                    `;
                });
                document.getElementById('checkoutBtn').disabled = false;
            }

            updateTotals();
        }

        function updateDeliveryFee() {
            updateTotals();
        }

        function updateTotals() {
            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const deliveryAreaId = parseInt(document.getElementById('deliveryAreaSelect').value);
            const deliveryArea = storeData.deliveryAreas.find(a => a.id === deliveryAreaId);
            const deliveryFee = deliveryArea ? deliveryArea.fee : 0;
            const total = subtotal + deliveryFee;

            document.getElementById('subtotal').textContent = `R$ ${subtotal.toFixed(2)}`;
            document.getElementById('deliveryFee').textContent = `R$ ${deliveryFee.toFixed(2)}`;
            document.getElementById('total').textContent = `R$ ${total.toFixed(2)}`;
        }

        function checkout() {
            if (cart.length === 0) {
                alert('Carrinho vazio!');
                return;
            }

            const deliveryAreaId = parseInt(document.getElementById('deliveryAreaSelect').value);
            if (!deliveryAreaId) {
                alert('Selecione uma √°rea de entrega!');
                return;
            }

            const deliveryArea = storeData.deliveryAreas.find(a => a.id === deliveryAreaId);
            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const total = subtotal + deliveryArea.fee;

            // Generate WhatsApp message
            let message = `üõí *NOVO PEDIDO - ${storeData.settings.storeName}*\n\n`;
            message += `üìã *ITENS:*\n`;
            
            cart.forEach(item => {
                message += `‚Ä¢ ${item.quantity}x ${item.name} - R$ ${(item.price * item.quantity).toFixed(2)}\n`;
            });

            message += `\nüí∞ *VALORES:*\n`;
            message += `Subtotal: R$ ${subtotal.toFixed(2)}\n`;
            message += `Entrega (${deliveryArea.name}): R$ ${deliveryArea.fee.toFixed(2)}\n`;
            message += `*Total: R$ ${total.toFixed(2)}*\n\n`;
            message += `üìç *√Årea de Entrega:* ${deliveryArea.name}\n\n`;
            message += `üí≥ *Formas de Pagamento:*\n`;
            message += `‚Ä¢ PIX\n`;
            message += `‚Ä¢ Transfer√™ncia Banc√°ria\n`;
            message += `‚Ä¢ Dinheiro na entrega\n\n`;
            message += `Aguardo confirma√ß√£o! üòä`;

            // Open WhatsApp
            const whatsappUrl = `https://wa.me/${storeData.settings.whatsappNumber}?text=${encodeURIComponent(message)}`;
            window.open(whatsappUrl, '_blank', 'noopener,noreferrer');

            // Clear cart
            cart = [];
            updateCart();
            alert('Pedido enviado para o WhatsApp! Aguarde a confirma√ß√£o.');
        }

        // Data Management Functions
        function saveDraft() {
            saveSettings();
            localStorage.setItem('labsystem_draft', JSON.stringify(storeData));
            alert('Rascunho salvo localmente!');
        }

        function loadDraft() {
            const draft = localStorage.getItem('labsystem_draft');
            if (draft) {
                storeData = JSON.parse(draft);
                loadCMSData();
                updateDashboard();
                alert('Rascunho carregado!');
            } else {
                alert('Nenhum rascunho encontrado!');
            }
        }

        function saveToLocalStorage() {
            localStorage.setItem('labsystem_store', JSON.stringify(storeData));
        }

        function loadFromLocalStorage() {
            const saved = localStorage.getItem('labsystem_store');
            if (saved) {
                storeData = JSON.parse(saved);
            }
        }

        function exportData() {
            const dataStr = JSON.stringify(storeData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'labsystem_backup.json';
            link.click();
            URL.revokeObjectURL(url);
            alert('Backup exportado com sucesso!');
        }

        function importData() {
            document.getElementById('importFile').click();
        }

        function handleImport(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    storeData = importedData;
                    saveToLocalStorage();
                    loadCMSData();
                    updateDashboard();
                    alert('Dados importados com sucesso!');
                } catch (error) {
                    alert('Erro ao importar dados: ' + error.message);
                }
            };
            reader.readAsText(file);
        }

        function publishToTotem() {
            // Simulate JSONBin sync
            saveSettings();
            saveToLocalStorage();
            document.getElementById('lastSync').textContent = new Date().toLocaleString('pt-BR');
            alert('Dados publicados no Totem com sucesso!\n\nEm um sistema real, os dados seriam enviados para o JSONBin.');
        }

        function syncData() {
            // Simulate sync
            document.getElementById('lastSync').textContent = new Date().toLocaleString('pt-BR');
            alert('Sincroniza√ß√£o conclu√≠da!');
        }

        // Initialize the application
        init();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98a50703b4c9f18b',t:'MTc1OTc1MjMzMS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
